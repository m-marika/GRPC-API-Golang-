// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculateLabParamClient is the client API for CalculateLabParam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateLabParamClient interface {
	CleanStage(ctx context.Context, in *DNAcon, opts ...grpc.CallOption) (*ResultCleanStage, error)
	Volume(ctx context.Context, in *DNA, opts ...grpc.CallOption) (*ResultVolume, error)
	VolumeQ(ctx context.Context, in *DNAconQ1, opts ...grpc.CallOption) (*ResultVolumeQ, error)
	Limit(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (*LimitReply, error)
}

type calculateLabParamClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateLabParamClient(cc grpc.ClientConnInterface) CalculateLabParamClient {
	return &calculateLabParamClient{cc}
}

func (c *calculateLabParamClient) CleanStage(ctx context.Context, in *DNAcon, opts ...grpc.CallOption) (*ResultCleanStage, error) {
	out := new(ResultCleanStage)
	err := c.cc.Invoke(ctx, "/grpc_api.CalculateLabParam/CleanStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateLabParamClient) Volume(ctx context.Context, in *DNA, opts ...grpc.CallOption) (*ResultVolume, error) {
	out := new(ResultVolume)
	err := c.cc.Invoke(ctx, "/grpc_api.CalculateLabParam/Volume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateLabParamClient) VolumeQ(ctx context.Context, in *DNAconQ1, opts ...grpc.CallOption) (*ResultVolumeQ, error) {
	out := new(ResultVolumeQ)
	err := c.cc.Invoke(ctx, "/grpc_api.CalculateLabParam/VolumeQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateLabParamClient) Limit(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (*LimitReply, error) {
	out := new(LimitReply)
	err := c.cc.Invoke(ctx, "/grpc_api.CalculateLabParam/Limit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateLabParamServer is the server API for CalculateLabParam service.
// All implementations must embed UnimplementedCalculateLabParamServer
// for forward compatibility
type CalculateLabParamServer interface {
	CleanStage(context.Context, *DNAcon) (*ResultCleanStage, error)
	Volume(context.Context, *DNA) (*ResultVolume, error)
	VolumeQ(context.Context, *DNAconQ1) (*ResultVolumeQ, error)
	Limit(context.Context, *LimitRequest) (*LimitReply, error)
	mustEmbedUnimplementedCalculateLabParamServer()
}

// UnimplementedCalculateLabParamServer must be embedded to have forward compatible implementations.
type UnimplementedCalculateLabParamServer struct {
}

func (UnimplementedCalculateLabParamServer) CleanStage(context.Context, *DNAcon) (*ResultCleanStage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanStage not implemented")
}
func (UnimplementedCalculateLabParamServer) Volume(context.Context, *DNA) (*ResultVolume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Volume not implemented")
}
func (UnimplementedCalculateLabParamServer) VolumeQ(context.Context, *DNAconQ1) (*ResultVolumeQ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeQ not implemented")
}
func (UnimplementedCalculateLabParamServer) Limit(context.Context, *LimitRequest) (*LimitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Limit not implemented")
}
func (UnimplementedCalculateLabParamServer) mustEmbedUnimplementedCalculateLabParamServer() {}

// UnsafeCalculateLabParamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculateLabParamServer will
// result in compilation errors.
type UnsafeCalculateLabParamServer interface {
	mustEmbedUnimplementedCalculateLabParamServer()
}

func RegisterCalculateLabParamServer(s grpc.ServiceRegistrar, srv CalculateLabParamServer) {
	s.RegisterService(&CalculateLabParam_ServiceDesc, srv)
}

func _CalculateLabParam_CleanStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNAcon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateLabParamServer).CleanStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.CalculateLabParam/CleanStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateLabParamServer).CleanStage(ctx, req.(*DNAcon))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateLabParam_Volume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateLabParamServer).Volume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.CalculateLabParam/Volume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateLabParamServer).Volume(ctx, req.(*DNA))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateLabParam_VolumeQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNAconQ1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateLabParamServer).VolumeQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.CalculateLabParam/VolumeQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateLabParamServer).VolumeQ(ctx, req.(*DNAconQ1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateLabParam_Limit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateLabParamServer).Limit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_api.CalculateLabParam/Limit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateLabParamServer).Limit(ctx, req.(*LimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculateLabParam_ServiceDesc is the grpc.ServiceDesc for CalculateLabParam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculateLabParam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_api.CalculateLabParam",
	HandlerType: (*CalculateLabParamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanStage",
			Handler:    _CalculateLabParam_CleanStage_Handler,
		},
		{
			MethodName: "Volume",
			Handler:    _CalculateLabParam_Volume_Handler,
		},
		{
			MethodName: "VolumeQ",
			Handler:    _CalculateLabParam_VolumeQ_Handler,
		},
		{
			MethodName: "Limit",
			Handler:    _CalculateLabParam_Limit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calcLab/calcLab.proto",
}
